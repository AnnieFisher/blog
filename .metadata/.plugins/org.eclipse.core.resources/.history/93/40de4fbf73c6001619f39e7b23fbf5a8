package data;

import java.util.Collection;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.transaction.annotation.Transactional;

import entities.Post;
import entities.Users;

@Transactional
public class BlogDAO {

	@PersistenceContext
	private EntityManager em;
	
	@Autowired
	BCryptPasswordEncoder passwordEncoder;
	
	public List<Users> indexUsers(){
		String query = "Select u from Users u";
		return em.createQuery(query, Users.class).getResultList();
	}
	
	public Users showUser(int id) {
		return em.find(Users.class, id);
	}
	
	
	public List<Post> indexPosts(){
		String query = "Select p from Post p";
		return em.createQuery(query,Post.class).getResultList();
	}
	
	public Post showPost(int id){
		return em.find(Post.class, id);
	}
	
	public Collection<Post> showPosts(int id) {
		Users user = null;
		try{
			user = em.find(Users.class, id);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return user.getPosts();
	}
	
	
	public void createPost(Post post, int id){
		Users user = em.find(Users.class, id);
		post.setUser(user);
		em.persist(post);
		em.flush();
	}
	
	public Users create(Users user) {
		String rawPassword = user.getPassword();
		String encodedPassword = passwordEncoder.encode(rawPassword);
		user.setPassword(encodedPassword);
		em.persist(user);
		em.flush();
		return user;
	}
	
	public Users authenticateUser(Users loginData) {
		Users user = null;
		user = em.createQuery("select u from Users u where u.username = :username", Users.class)
				.setParameter("username"	, loginData.getUsername()).getSingleResult();
		System.out.println(user.getId());
		if(user !=null) {
			String rawPassword = loginData.getPassword();
			String encodedPassword = user.getPassword();
			if(passwordEncoder.matches(rawPassword, encodedPassword)) {
				return user;
			} else {
				System.out.println("invalid password entered");
				return null;
			}
		}
		return user;
	}
	
	public Post update(int id, Post post){
		Post managedPost = em.find(Post.class, id);
		managedPost.setBody(post.getBody());
		managedPost.setPostName(post.getPostName());
		managedPost.setPostDate(post.getPostDate());
		return managedPost;
	}
	
	public void destroyPost(int id){
		Post post = em.find(Post.class, id);
		em.remove(post);
	}
}
